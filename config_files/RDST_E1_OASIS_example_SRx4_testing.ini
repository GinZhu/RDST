; Author: Jin Zhu (jin.zhu@cl.cam.ac.uk)

; to run:
;   python train.py --config-file PATH_TO_THIS_INI

; Notes:
;   in ParametersLoader, all values will be called as:
;       eval(config(s, k)))
;   thus, str should be 'xxx'
;   to add new parameters, test it with eval(value) first.


[DEFAULT]
; /DIV2K /OASIS_1/disc1
data_folder = './data/OASIS/example'
output_dir = './outputs'
; print log to screen or not
verbose = True
model_name = 'RDST_OASIS_SRx4'
gpu_id = 0
toy_problem = False
precision = False

[TL]
pre_trained_g = None
pre_trained_d = None

[Training]
; training_states == epochs_in_total.keys() == loss_scalars.keys()
; loss_scalars[any_key].keys() in training_losses
training_states = ['WarmUP', 'UNet-F']
; to train, change epochs to 100000 and 20000 for warmup and fine-tuning, respectively
epochs_in_total = {'WarmUP': 1000, 'UNet-F':200}
loss_scalars = {'WarmUP': {'L1': 1,}, 'UNet-F': {'L1': 0.1, 'UNet-F': 1}}
; L1, MSE, VGG22, VGG54, GAN, WGAN, WGNA_GP, ...
training_losses = ['L1', 'UNet-F']
; GAN / WGAN / WGAN_GP / RaGAN / RaGAN_GP
gan_type = 'None'
gan_k = 1
wgan_clip_value = 0.01
batch_size = 32
augmentation = False
; to train, change check_every to 2000
check_every = 100
; {'encoder': [1, 2, 3, 4, 5]} / {'seg_loss_mode': None}, {'label-hr': None} / {'label-gt': None}
unet_loss_layers = {'encoder-L1': [1]}
; OASIS 1 -> 4; BraTS 1 -> 4 ; tumor_only: dice on 1 2 3 only
unet_loss_mode = 'OASIS_lesion_only'

[Testing]
; todo: modify this
; SRResNet, SRGAN, SRDenseNet, EDSR, MetaSR
well_trained_single_scale_model_g = './outputs/RDST_OASIS_SRx4_None/models/UNet-F_model_g.pt'
trained_model_mode = 'MetaSR'
well_trained_model_g_x2 = ''
well_trained_model_g_x3 = ''
well_trained_model_g_x4 = ''
well_trained_model_mdsr = ''
well_trained_model_metasr = '/content/drive/My Drive/0_ResearchWork/MetaSR/well_trained_models/Meta_SR_OASIS_data_norm=zero_mean_EDSR_WGAN_GP/SRGAN_model_g.pt'
sr_scales_for_final_testing = [4.0]
sr_scales_for_saving = [4.0]
eva_metrics_for_testing = 'psnr ssim mse uqi ergas scc vifp fid'

[LearningRate]
weight_decay = 0
lr_decay_gamma = 0.5
; 'step 200' 'milestones 100'
lr_decay_type = 'milestones 500000'

[Activation]
act = 'leaky_relu'
leaky_relu_slope = 0.2
d_act = 'leaky_relu'

[Data]
patch_size = 24
input_channel = 1
multi_threads = 8
; no normalization '' / zero_mean normalization 'zero_mean' / unit_std normalization 'unit_std'
normal_inputs = ''
return_res_image = False
lr_image_size_remain = False
blur_method = ''

[ModelEmbedding]
; final_rst = pred + rs * interpolated_img
residual_scale = 0.

[DIV2K]
color_mode = 'YCbCr'
test_lr_patch_stride = 24

[OASIS]
; training and testing examples used in our paper (random selected)
; training_patient_ids_oasis = ['OAS1_0028_MR1', 'OAS1_0016_MR1', 'OAS1_0021_MR1', 'OAS1_0012_MR1', 'OAS1_0011_MR1', 'OAS1_0035_MR1', 'OAS1_0017_MR1', 'OAS1_0039_MR1', 'OAS1_0040_MR1', 'OAS1_0038_MR1', 'OAS1_0027_MR1', 'OAS1_0001_MR1', 'OAS1_0034_MR1', 'OAS1_0042_MR1', 'OAS1_0007_MR1', 'OAS1_0006_MR1', 'OAS1_0018_MR1', 'OAS1_0013_MR1', 'OAS1_0026_MR1', 'OAS1_0002_MR1', 'OAS1_0020_MR1', 'OAS1_0025_MR1', 'OAS1_0022_MR1', 'OAS1_0037_MR1', 'OAS1_0031_MR1', 'OAS1_0005_MR1', 'OAS1_0041_MR1', 'OAS1_0015_MR1', 'OAS1_0014_MR1', 'OAS1_0030_MR1']
; validation_patient_ids_oasis = ['OAS1_0009_MR1', 'OAS1_0033_MR1', 'OAS1_0023_MR1']
; testing_patient_ids_oasis = ['OAS1_0009_MR1', 'OAS1_0033_MR1', 'OAS1_0023_MR1', 'OAS1_0004_MR1', 'OAS1_0019_MR1', 'OAS1_0032_MR1', 'OAS1_0029_MR1', 'OAS1_0010_MR1', 'OAS1_0003_MR1']
training_patient_ids_oasis = ['OAS1_0001_MR1', 'OAS1_0002_MR1', 'OAS1_0003_MR1',]
validation_patient_ids_oasis = ['OAS1_0004_MR1',]
testing_patient_ids_oasis = ['OAS1_0004_MR1',]
medical_image_dim_oasis = 2
; 144x120: [32, 28] 180x144: [14, 16], to fit swinir window_size 160x128: [24, 24]
margin_oasis = [24, 24]

[BratS]
training_patient_ids_brats = ['HGG_Brats17_CBICA_ABN_1', 'HGG_Brats17_TCIA_607_1', 'HGG_Brats17_TCIA_221_1', 'HGG_Brats17_TCIA_162_1', 'HGG_Brats17_TCIA_203_1', 'HGG_Brats17_CBICA_ASW_1', 'HGG_Brats17_TCIA_226_1', 'HGG_Brats17_CBICA_AQQ_1', 'HGG_Brats17_CBICA_AAP_1', 'HGG_Brats17_2013_26_1', 'HGG_Brats17_TCIA_608_1', 'HGG_Brats17_CBICA_AQT_1', 'HGG_Brats17_2013_20_1', 'HGG_Brats17_TCIA_149_1', 'HGG_Brats17_TCIA_168_1', 'HGG_Brats17_CBICA_ABO_1', 'HGG_Brats17_2013_12_1', 'HGG_Brats17_CBICA_AME_1', 'HGG_Brats17_TCIA_498_1', 'HGG_Brats17_TCIA_278_1', 'HGG_Brats17_TCIA_491_1', 'HGG_Brats17_2013_25_1', 'HGG_Brats17_TCIA_412_1', 'HGG_Brats17_TCIA_401_1', 'HGG_Brats17_TCIA_242_1', 'HGG_Brats17_CBICA_ALX_1', 'HGG_Brats17_TCIA_184_1', 'HGG_Brats17_CBICA_AWH_1', 'HGG_Brats17_TCIA_257_1', 'HGG_Brats17_TCIA_603_1', 'HGG_Brats17_TCIA_121_1', 'HGG_Brats17_TCIA_218_1', 'HGG_Brats17_TCIA_105_1', 'HGG_Brats17_TCIA_479_1', 'HGG_Brats17_TCIA_396_1', 'LGG_Brats17_TCIA_202_1', 'LGG_Brats17_TCIA_644_1', 'LGG_Brats17_TCIA_630_1', 'LGG_Brats17_2013_1_1', 'LGG_Brats17_TCIA_402_1', 'LGG_Brats17_TCIA_266_1', 'LGG_Brats17_TCIA_312_1', 'LGG_Brats17_2013_24_1', 'LGG_Brats17_TCIA_653_1', 'LGG_Brats17_TCIA_632_1', 'LGG_Brats17_TCIA_299_1', 'LGG_Brats17_TCIA_282_1', 'LGG_Brats17_TCIA_640_1', 'LGG_Brats17_2013_6_1', 'LGG_Brats17_TCIA_629_1']
validation_patient_ids_brats = ['HGG_Brats17_2013_5_1', 'HGG_Brats17_TCIA_198_1', 'LGG_Brats17_TCIA_310_1']
testing_patient_ids_brats = ['HGG_Brats17_2013_5_1', 'HGG_Brats17_TCIA_198_1', 'HGG_Brats17_TCIA_378_1', 'HGG_Brats17_CBICA_ABE_1', 'HGG_Brats17_TCIA_296_1', 'HGG_Brats17_CBICA_ARF_1', 'HGG_Brats17_TCIA_375_1', 'LGG_Brats17_TCIA_618_1', 'LGG_Brats17_TCIA_141_1', 'LGG_Brats17_TCIA_310_1']
; remember to modify Data:input_channel correspondingly
modalities_brats = ['t1ce', 't1', 't2', 'flair']
medical_image_dim_brats = 2
margin_brats = [30, 35]

[ACDC]
training_patient_ids_acdc = ['patient011', 'patient014', 'patient043', 'patient009', 'patient083', 'patient001', 'patient042', 'patient019', 'patient095', 'patient094', 'patient032', 'patient100', 'patient090', 'patient093', 'patient065', 'patient080', 'patient010', 'patient073', 'patient006', 'patient061', 'patient023', 'patient028', 'patient063', 'patient031', 'patient084', 'patient091', 'patient072', 'patient060', 'patient058', 'patient003', 'patient017', 'patient059', 'patient004', 'patient078', 'patient075', 'patient071', 'patient025', 'patient021', 'patient064', 'patient074', 'patient018', 'patient008', 'patient026', 'patient029', 'patient036', 'patient013', 'patient002', 'patient034', 'patient086', 'patient055', 'patient016', 'patient089', 'patient044', 'patient088', 'patient022', 'patient050', 'patient092', 'patient081', 'patient096', 'patient039', 'patient098', 'patient067', 'patient099', 'patient007', 'patient045', 'patient077', 'patient052', 'patient051', 'patient087', 'patient066', 'patient041', 'patient069', 'patient024', 'patient057', 'patient079', 'patient037', 'patient068', 'patient053', 'patient047', 'patient038']
validation_patient_ids_acdc = ['patient049', 'patient015', 'patient082', 'patient035', 'patient070', 'patient056', 'patient046', 'patient062']
testing_patient_ids_acdc = ['patient049', 'patient015', 'patient082', 'patient035', 'patient070', 'patient056', 'patient046', 'patient062', 'patient040', 'patient012', 'patient097', 'patient030', 'patient048', 'patient027', 'patient020', 'patient076', 'patient005', 'patient085', 'patient054', 'patient033']
medical_image_dim_acdc = 2
crop_size_acdc = 128

[COVID]
training_patient_ids_covid = ['volume-covid19-A-0070', 'volume-covid19-A-0187', 'volume-covid19-A-0196_0', 'volume-covid19-A-0114', 'volume-covid19-A-0252', 'volume-covid19-A-0181', 'volume-covid19-A-0072', 'volume-covid19-A-0120', 'volume-covid19-A-0096', 'volume-covid19-A-0044', 'volume-covid19-A-0083', 'volume-covid19-A-0077', 'volume-covid19-A-0038', 'volume-covid19-A-0090', 'volume-covid19-A-0237', 'volume-covid19-A-0240', 'volume-covid19-A-0039', 'volume-covid19-A-0112', 'volume-covid19-A-0147', 'volume-covid19-A-0167_1', 'volume-covid19-A-0247', 'volume-covid19-A-0236', 'volume-covid19-A-0314', 'volume-covid19-A-0074_1', 'volume-covid19-A-0106', 'volume-covid19-A-0215', 'volume-covid19-A-0202_0', 'volume-covid19-A-0228', 'volume-covid19-A-0041', 'volume-covid19-A-0047_1', 'volume-covid19-A-0504', 'volume-covid19-A-0151', 'volume-covid19-A-0073', 'volume-covid19-A-0635', 'volume-covid19-A-0199', 'volume-covid19-A-0129', 'volume-covid19-A-0031', 'volume-covid19-A-0164', 'volume-covid19-A-0046', 'volume-covid19-A-0133', 'volume-covid19-A-0154', 'volume-covid19-A-0130', 'volume-covid19-A-0092', 'volume-covid19-A-0110', 'volume-covid19-A-0178', 'volume-covid19-A-0014', 'volume-covid19-A-0315', 'volume-covid19-A-0034', 'volume-covid19-A-0011', 'volume-covid19-A-0251', 'volume-covid19-A-0016', 'volume-covid19-A-0013', 'volume-covid19-A-0161', 'volume-covid19-A-0054', 'volume-covid19-A-0066', 'volume-covid19-A-0201', 'volume-covid19-A-0255', 'volume-covid19-A-0214', 'volume-covid19-A-0233', 'volume-covid19-A-0053', 'volume-covid19-A-0165', 'volume-covid19-A-0179', 'volume-covid19-A-0402', 'volume-covid19-A-0435', 'volume-covid19-A-0296', 'volume-covid19-A-0383_1', 'volume-covid19-A-0307', 'volume-covid19-A-0413', 'volume-covid19-A-0473', 'volume-covid19-A-0391', 'volume-covid19-A-0316', 'volume-covid19-A-0475', 'volume-covid19-A-0354', 'volume-covid19-A-0339', 'volume-covid19-A-0347', 'volume-covid19-A-0351', 'volume-covid19-A-0421', 'volume-covid19-A-0366', 'volume-covid19-A-0417', 'volume-covid19-A-0472', 'volume-covid19-A-0361', 'volume-covid19-A-0267', 'volume-covid19-A-0282', 'volume-covid19-A-0338', 'volume-covid19-A-0400', 'volume-covid19-A-0388', 'volume-covid19-A-0386', 'volume-covid19-A-0246', 'volume-covid19-A-0270', 'volume-covid19-A-0285', 'volume-covid19-A-0377', 'volume-covid19-A-0455', 'volume-covid19-A-0355', 'volume-covid19-A-0331', 'volume-covid19-A-0264', 'volume-covid19-A-0418', 'volume-covid19-A-0332', 'volume-covid19-A-0397', 'volume-covid19-A-0463', 'volume-covid19-A-0414', 'volume-covid19-A-0342', 'volume-covid19-A-0295', 'volume-covid19-A-0669', 'volume-covid19-A-0380', 'volume-covid19-A-0301', 'volume-covid19-A-0319', 'volume-covid19-A-0329', 'volume-covid19-A-0445', 'volume-covid19-A-0437', 'volume-covid19-A-0313', 'volume-covid19-A-0263', 'volume-covid19-A-0288', 'volume-covid19-A-0407', 'volume-covid19-A-0382', 'volume-covid19-A-0416', 'volume-covid19-A-0576', 'volume-covid19-A-0423', 'volume-covid19-A-0394', 'volume-covid19-A-0299', 'volume-covid19-A-0360', 'volume-covid19-A-0462', 'volume-covid19-A-0464', 'volume-covid19-A-0256_1', 'volume-covid19-A-0422', 'volume-covid19-A-0372', 'volume-covid19-A-0567', 'volume-covid19-A-0500', 'volume-covid19-A-0696', 'volume-covid19-A-0323', 'volume-covid19-A-0589', 'volume-covid19-A-0666', 'volume-covid19-A-0522', 'volume-covid19-A-0173', 'volume-covid19-A-0686', 'volume-covid19-A-0648', 'volume-covid19-A-0685', 'volume-covid19-A-0665', 'volume-covid19-A-0531', 'volume-covid19-A-0524', 'volume-covid19-A-0627', 'volume-covid19-A-0652', 'volume-covid19-A-0534', 'volume-covid19-A-0569', 'volume-covid19-A-0659', 'volume-covid19-A-0590', 'volume-covid19-A-0526', 'volume-covid19-A-0494', 'volume-covid19-A-0636', 'volume-covid19-A-0547', 'volume-covid19-A-0579', 'volume-covid19-A-0511', 'volume-covid19-A-0623', 'volume-covid19-A-0626', 'volume-covid19-A-0660', 'volume-covid19-A-0483', 'volume-covid19-A-0530', 'volume-covid19-A-0600', 'volume-covid19-A-0658', 'volume-covid19-A-0562', 'volume-covid19-A-0560', 'volume-covid19-A-0392', 'volume-covid19-A-0443', 'volume-covid19-A-0498', 'volume-covid19-A-0566', 'volume-covid19-A-0585', 'volume-covid19-A-0548', 'volume-covid19-A-0553', 'volume-covid19-A-0559', 'volume-covid19-A-0670', 'volume-covid19-A-0586', 'volume-covid19-A-0694', 'volume-covid19-A-0581', 'volume-covid19-A-0643', 'volume-covid19-A-0025', 'volume-covid19-A-0570', 'volume-covid19-A-0629', 'volume-covid19-A-0599', 'volume-covid19-A-0575', 'volume-covid19-A-0239', 'volume-covid19-A-0604', 'volume-covid19-A-0479', 'volume-covid19-A-0698', 'volume-covid19-A-0638', 'volume-covid19-A-0656', 'volume-covid19-A-0614', 'volume-covid19-A-0495', 'volume-covid19-A-0476', 'volume-covid19-A-0320', 'volume-covid19-A-0678', 'volume-covid19-A-0657', 'volume-covid19-A-0525', 'volume-covid19-A-0537', 'volume-covid19-A-0502', 'volume-covid19-A-0521', 'volume-covid19-A-0387', 'volume-covid19-A-0557', 'volume-covid19-A-0003', 'volume-covid19-A-0612', 'volume-covid19-A-0573']
validation_patient_ids_covid = ['volume-covid19-A-0089', 'volume-covid19-A-0189_0', 'volume-covid19-A-0170', 'volume-covid19-A-0143', 'volume-covid19-A-0091', 'volume-covid19-A-0033', 'volume-covid19-A-0026']
testing_patient_ids_covid = ['volume-covid19-A-0089', 'volume-covid19-A-0189_0', 'volume-covid19-A-0170', 'volume-covid19-A-0143', 'volume-covid19-A-0091', 'volume-covid19-A-0033', 'volume-covid19-A-0026', 'volume-covid19-A-0082', 'volume-covid19-A-0330', 'volume-covid19-A-0180_0', 'volume-covid19-A-0108', 'volume-covid19-A-0229', 'volume-covid19-A-0075', 'volume-covid19-A-0156', 'volume-covid19-A-0451', 'volume-covid19-A-0064', 'volume-covid19-A-0441', 'volume-covid19-A-0369_1', 'volume-covid19-A-0294', 'volume-covid19-A-0257', 'volume-covid19-A-0318_0', 'volume-covid19-A-0297', 'volume-covid19-A-0420', 'volume-covid19-A-0343', 'volume-covid19-A-0376', 'volume-covid19-A-0408', 'volume-covid19-A-0259', 'volume-covid19-A-0268', 'volume-covid19-A-0345', 'volume-covid19-A-0690', 'volume-covid19-A-0654', 'volume-covid19-A-0287_0', 'volume-covid19-A-0584', 'volume-covid19-A-0490', 'volume-covid19-A-0513', 'volume-covid19-A-0676', 'volume-covid19-A-0509', 'volume-covid19-A-0523', 'volume-covid19-A-0673', 'volume-covid19-A-0538', 'volume-covid19-A-0620', 'volume-covid19-A-0516', 'volume-covid19-A-0543', 'volume-covid19-A-0489', 'volume-covid19-A-0631', 'volume-covid19-A-0004', 'volume-covid19-A-0218', 'volume-covid19-A-0457', 'volume-covid19-A-0302', 'volume-covid19-A-0697']
; remember to modify Data:input_channel correspondingly
medical_image_dim_covid = 2
margin_covid = [90, 50]

[Optimizer]
; 'Adam, SGD, RMSprop
opt = 'Adam'
learning_rate = 0.0001
momentum = 0.9
beta1 = 0.9
beta2 = 0.99
epsilon = 1e-8
loss_threshold = 1e8

[Evaluation]
eva_metrics = 'mse psnr ssim rmse rmse_sw uqi ergas scc rase sam vifp psnrb fid'
quick_eva_metrics = 'psnr ssim'
quick_eva_num_samples = 64
quick_eva_num_images_to_save = 4
eva_gpu_id = 0

[MultiSR]
scale_free = False
; in sota sr config file, this is for MDSR and ipt
all_sr_scales = [4.0]
test_sr_scales = [4.0]
; 'wtb', 'wtr', 'wtp', 'wts', 'ipt', 'swinir', 'rdst'
feature_generator = 'rdst'

[SingleSR]
; modify [MultiSR]: all_sr_scales / test_sr_scales correspondingly for single-sr model
sr_scale = 4.0

[EDSR]
; EDSR act: ReLU, no GAN
; EDSR loss: L1
; lite
edsr_act = 'leaky_relu'
edsr_n_feats = 64
edsr_res_scale = 1.
edsr_n_resblocks = 16
edsr_bn = None

;edsr_act = 'relu'
;edsr_n_feats = 256
;edsr_res_scale = 0.1
;edsr_n_resblocks = 32
;edsr_bn = None

[IPT]
ipt_act = 'relu'
ipt_n_feats = 64
ipt_patch_dim = 3
ipt_num_heads = 12
ipt_num_layers = 12
ipt_dropout_rate = 0
ipt_no_norm = False
ipt_freeze_norm = False
ipt_post_norm = False
ipt_no_mlp = False
ipt_pos_every = False
ipt_no_pos = False
ipt_num_queries = 3

[SwinTransformer]
swin_patch_size = 1
swin_hidden_ratio = 2.
swin_qkv_bias = True
swin_qk_scale = None
swin_drop_rate = 0.
swin_attn_drop_rate = 0.
swin_drop_path_rate = 0.1

[SwinIR]
sir_token_size = 1
; assert embed_dim % num_heads = 0
sir_embed_dim = 60
sir_window_size = 8
; length of layers and heads should be the same
sir_swintr_layers = [6, 6, 6, 6]
sir_num_heads = [6, 6, 6, 6]
sir_hidden_ratio = 2.
sir_qkv_bias = True
sir_qk_scale = None
sir_drop_rate = 0.
sir_attn_drop_rate = 0.
sir_drop_path_rate = 0.1
sir_layer_norm = True
sir_ape = False
sir_patch_norm = True
sir_use_checkpoint = False
sir_img_range = 1.
sir_upsampler = 'pixelshuffledirect'
sir_res_connection = '1conv'

[RDST]
rdst_feature_last_operation = True
rdst_global_bottleneck = False
rdst_global_bottleneck_ratio = 1.
rdst_pre_norm = True
rdst_embed_dim = 60
rdst_dense_layer_depths = [2, 2, 2, 2, 2, 2, 2, 2,]
rdst_num_heads = [6, 6, 6, 6, 6, 6, 6, 6,]
rdst_window_size = [8, 8, 8, 8, 8, 8, 8, 8, ]
rdst_rdb_depths = [3, 3, 3, 3, 3, 3, 3, 3,]
rdst_layer_norm = True
rdst_ape = False
rdst_patch_norm = True
rdst_use_checkpoint = False
rdst_res_connection = '1conv'
rdst_growth_rate = 30
rdst_dense_scale = 1.
rdst_dim_modify_mode = 'tail'
rdst_rdb_residual_scale = 1.
rdst_global_res_scale = 1.
rdst_act_in_conv = 'leaky_relu'
rdst_bn_in_conv = None

